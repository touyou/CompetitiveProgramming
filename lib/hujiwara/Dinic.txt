int dfs(int i,int g,vector<vector<int> > &edge,vector<vector<int> > &backedge,/*vector<vector<int> > &cap,*/vector<int> &vis,vector<int> &backvis,vector<int> &lev,vector<vector<int> > &f,int t)
{
  if(i==t){
    //printf("%d\n",g);
    return g;
  }
  for(;vis[i]<edge[i].size();vis[i]++){
    int j=edge[i][vis[i]];
    if(f[i][j]<1/*cap[i][vis[i]]*/&&lev[j]>lev[i]){
      int G=dfs(j,min(g,1/*cap[i][vis[i]]*/-f[i][j]),edge,backedge/*,cap*/,vis,backvis,lev,f,t);
      if(G>0){
	f[i][j]+=G;
	return G;
      }
    }
  }
  for(;backvis[i]<backedge[i].size();backvis[i]++){
    int j=backedge[i][backvis[i]];
    if(0<f[j][i]&&lev[j]>lev[i]){
      int G=dfs(j,min(g,f[j][i]),edge,backedge/*,cap*/,vis,backvis,lev,f,t);
      if(G>0){
	f[j][i]-=G;
	return G;
      }
    }
  }
  return 0;
}

int max_flow(vector<vector<int> > &edge,/*vector<vector<int> > &cap,*/int s,int t)
{
  int n=edge.size();
  vector<vector<int> > backedge(n);
  for(int i=0;i<n;i++){
    for(int j=0;j<edge[i].size();j++){
      backedge[edge[i][j]].push_back(i);
    }
  }
  vector<vector<int> > flow(n,vector<int>(n,0));
  int Max=0;
  while(1){
    vector<int> lev(n,-1);
    lev[s]=0;
    queue<int> Q;
    Q.push(s);
    while(!Q.empty()){
      int i=Q.front();
      Q.pop();
      for(int j=0;j<edge[i].size();j++){
	int k=edge[i][j];
	if(lev[k]==-1&&flow[i][k]<1/*cap[i][k]*/){
	  lev[k]=lev[i]+1;
	  Q.push(k);
	}
      }
      for(int j=0;j<backedge[i].size();j++){
	int k=backedge[i][j];
	if(lev[k]==-1&&0<flow[k][i]){
	  lev[k]=lev[i]+1;
	  Q.push(k);
	}
      }
    }
    if(lev[t]==-1){
      break;
    }
    vector<int> vis(n,0),backvis(n,0);
    int F;
    while(F=dfs(s,INF,edge,backedge/*,cap*/,vis,backvis,lev,flow,t)){
      Max+=F;
    }
  }
  return Max;
}
