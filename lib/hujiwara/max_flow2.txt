int max_flow(int edge[SIZE][SIZE],int sz[SIZE],int n,int s,int t)
{
  static int backedge[SIZE][SIZE],backsz[SIZE]={0};
  for(int i=0;i<n;i++){
    for(int j=0;j<sz[i];j++){
      backedge[edge[i][j]][backsz[edge[i][j]]++]=i;
    }
  }
  static int flow[SIZE][SIZE];
  while(1){
    queue<int> bfs;
    bfs.push(s);
    vector<bool> visit(n,0);
    visit[s]=1;
    int res[32*32+2]={0},back[32*32+2];
    while(!bfs.empty()){
      int i=bfs.front();
      bfs.pop();
      for(int j=0;j<sz[i];j++){
	int k=edge[i][j];
	if(!visit[k]){
	  if(i==s)
	    res[k]=max(0,1-flow[i][k]);
	  else
	    res[k]=min(res[i],1-flow[i][k]);
	  if(res[k]){
	    bfs.push(k);
	    visit[k]=1;
	    back[k]=i;
	  }
	}
      }
      for(int j=0;j<backsz[i];j++){
	int k=backedge[i][j];
	if(!visit[k]){
	  if(i==s)
	    res[k]=flow[k][i];
	  else
	    res[k]=min(res[i],flow[k][i]);
	  if(res[k]){
	    bfs.push(k);
	    visit[k]=1;
	    back[k]=i-n;
	  }
	}
      }
    }
    if(!res[t])
      break;
    for(int i=t;i!=s;){
      if(back[i]>=0){
	flow[back[i]][i]+=res[t];
	i=back[i];
      }
      else{
	flow[i][back[i]+n]-=res[t];
	i=back[i]+n;
      }
    }
  }
  int Max=0;
  for(int i=0;i<n;i++){
    Max+=flow[s][i];
  }
  return Max;
}
