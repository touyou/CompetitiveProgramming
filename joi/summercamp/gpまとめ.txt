GP関連・種類
(chpter 7 p61-)
＊遺伝的ネットワークプログラミング（GNP）
・判定と処理の基本単位を判定ノード（非終端記号）および処理ノード（終端記号）で用意
・複数のノードをグラフ構造状に接続
・有向グラフ構造で特定の処理を反復可能　≒　自動定義関数
・突然変異は接続の変更or ノード関数の変更によりおこなう

ベンチマークテスト問題
＊タイルワールド
Santa Fe Tailの拡張的問題
…行動＝MOVE,RIGHT,LEFT,STAY
…センサ＝前後左右・最も近いタイルの方向、穴の方向
                最も近いタイルから見た最も近い穴の方向、二番目に近いタイルの方向

※気付いたことなど※
traverse…木をめぐる関数←必要
tournament sizeは100に対して2
表示関数は別にする
crosscoverの選択はトーナメント
なるべく悪いものが淘汰されるように実装。

(1000回の結果)
------------ Tree-Based GP
result: food=4 Energy=245 evaluation=377.200
改善
result: food=10 Energy=272 evaluation=949.400
result: food=9 Energy=214 evaluation=856.650

result: food=9 Energy=87 evaluation=853.420
SZ=200 GENE=100 TSZ=5 MUTE=0.050 RESERVE=0.100

result: food=8 Energy=134 evaluation=756.880
SZ=200 GENE=100 TSZ=5 MUTE=0.050 RESERVE=0.100

result: food=5 Energy=300 evaluation=481.770
SZ=200 GENE=100 TSZ=5 MUTE=0.050 RESERVE=0.100

result: food=8 Energy=120 evaluation=767.600
SZ=100 GENE=100 TSZ=2 MUTE=0.050 RESERVE=0.100

result: food=2 Energy=344 evaluation=107.800
SZ=100 GENE=100 TSZ=3 MUTE=0.010 RESERVE=0.100

result: food=19 Energy=42 evaluation=18951.580
SZ=100 GENE=100 TSZ=3 MUTE=0.010 RESERVE=0.100

result: food=12 Energy=130 evaluation=11811.250
SZ=500 GENE=100 TSZ=5 MUTE=0.090 RESERVE=0.100

result: food=5 Energy=150 evaluation=4957.130
SZ=500 GENE=10000 TSZ=5 MUTE=0.010 RESERVE=0.100

result: food=12 Energy=85 evaluation=774.200
SZ=500 GENE=100 TSZ=5 MUTE=0.090 RESERVE=0.100

result: food=8 Energy=250 evaluation=601.100
SZ=500 GENE=100 TSZ=5 MUTE=0.090 RESERVE=0.100

------------- Linear GP
result: food=17 Energy=287 evalution=1686.280

(100回でうまくいったやつ)
result: food=11 Energy=348 evalution=1095.080
f(l,f(m,m)f(l,m))f(rllf(l,r)mm,f(m,l)f(l,r))f(m,mrmm)mrrllmmmf(l,f(f(lmlrl,mf(r,f(f(f(m,r),l)f(l,r)f(f(r,r),lmllr)rmrrrrrmlf(rmm,mm)f(m,l)mmrlm,l))mmf(ml,r)),l)rrrlf(l,l)mf(mr,l)mmlrf(l,m)mf(rm,lll)mrlmrlf(lm,m))m

(謎のセグフォ)
==14312== Memcheck, a memory error detector
==14312== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==14312== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==14312== Command: ./a.out
==14312== 
generation 0: 1(89.260) 0(-1.210) 2(187.860) 0(-5.740) 0(-2.700) 0(-17.360) 3(297.480) 2(196.340) 2(194.840) 3(288.070) 
generation 0: 0(-16.560) 1(89.680) 0(-9.570) 1(96.410) 3(297.590) 2(192.250) 1(96.440) 0(-6.870) 2(185.430) 1(96.940) 
generation 0: 3(293.370) 1(94.920) 1(99.040) 0(-14.180) 1(96.350) 1(93.170) 2(192.460) 0(-8.020) 3(293.200) 0(-17.140) 
generation 0: 2(191.200) 1(98.270) 1(96.900) 0(-2.460) 2(192.970) 0(-4.800) 1(91.180) 0(-5.580) 1(94.000) 0(-6.380) 
generation 0: 0(-5.190) 0(-3.260) 0(-4.880) 1(94.700) 2(194.880) 1(97.150) 0(-5.690) 1(94.680) 4(394.370) 3(294.440) 
generation 0: 0(-8.420) 1(95.940) 1(94.650) 0(-7.660) 1(96.140) 1(89.680) 1(95.460) 1(99.040) 3(298.560) 3(292.040) 
generation 0: 2(198.220) 6(595.080) 0(-3.910) 0(-2.870) 2(196.950) 0(-4.680) 0(-4.360) 1(94.400) 1(94.690) 1(94.750) 
generation 0: 0(-9.360) 3(299.030) 0(-5.800) 0(-1.200) 0(-15.740) 2(197.470) 2(196.640) 0(-1.820) 3(290.790) 0(-2.730) 
generation 0: 1(93.020) 2(191.390) 3(289.460) 1(91.930) 1(87.750) 0(-4.190) 0(-8.480) 2(197.710) 3(292.720) 2(195.000) 
generation 0: 3(298.570) 1(88.150) 0(-1.050) 1(97.140) 1(96.890) 1(94.700) 2(195.930) 2(190.060) 1(81.390) 0(-10.870) 
==14312== Stack overflow in thread 1: can't grow stack to 0xbe1f6ffc
==14312== 
==14312== Process terminating with default action of signal 11 (SIGSEGV)
==14312==  Access not within mapped region at address 0xBE1F6FFC
==14312==    at 0x4185957: random_r (random_r.c:364)
==14312==  If you believe this happened as a result of a stack
==14312==  overflow in your program's main thread (unlikely but
==14312==  possible), you can try to increase the size of the
==14312==  main thread stack using the --main-stacksize= flag.
==14312==  The main thread stack size used in this run was 8388608.
==14312== Stack overflow in thread 1: can't grow stack to 0xbe1f6ff4
==14312== 
==14312== Process terminating with default action of signal 11 (SIGSEGV)
==14312==  Access not within mapped region at address 0xBE1F6FF4
==14312==    at 0x4025430: _vgnU_freeres (in /usr/lib/valgrind/vgpreload_core-x86-linux.so)
==14312==  If you believe this happened as a result of a stack
==14312==  overflow in your program's main thread (unlikely but
==14312==  possible), you can try to increase the size of the
==14312==  main thread stack using the --main-stacksize= flag.
==14312==  The main thread stack size used in this run was 8388608.
==14312== 
==14312== HEAP SUMMARY:
==14312==     in use at exit: 2,274,416 bytes in 174 blocks
==14312==   total heap usage: 16,141 allocs, 15,967 frees, 5,215,012 bytes allocated
==14312== 
==14312== LEAK SUMMARY:
==14312==    definitely lost: 0 bytes in 0 blocks
==14312==    indirectly lost: 0 bytes in 0 blocks
==14312==      possibly lost: 2,880 bytes in 64 blocks
==14312==    still reachable: 2,271,536 bytes in 110 blocks
==14312==         suppressed: 0 bytes in 0 blocks
==14312== Rerun with --leak-check=full to see details of leaked memory
==14312== 
==14312== For counts of detected and suppressed errors, rerun with: -v
==14312== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Segmentation fault (コアダンプ)

==25641== Memcheck, a memory error detector
==25641== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==25641== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==25641== Command: ./a.out
==25641== 
==25641== Stack overflow in thread 1: can't grow stack to 0xbe601ffc
==25641== 
==25641== Process terminating with default action of signal 11 (SIGSEGV)
==25641==  Access not within mapped region at address 0xBE601FFC
==25641==    at 0x804A15C: std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (stl_bvector.h:196)
==25641==  If you believe this happened as a result of a stack
==25641==  overflow in your program's main thread (unlikely but
==25641==  possible), you can try to increase the size of the
==25641==  main thread stack using the --main-stacksize= flag.
==25641==  The main thread stack size used in this run was 8388608.
==25641== Stack overflow in thread 1: can't grow stack to 0xbe601ff8
==25641== 
==25641== Process terminating with default action of signal 11 (SIGSEGV)
==25641==  Access not within mapped region at address 0xBE601FF8
==25641==    at 0x4025430: _vgnU_freeres (in /usr/lib/valgrind/vgpreload_core-x86-linux.so)
==25641==  If you believe this happened as a result of a stack
==25641==  overflow in your program's main thread (unlikely but
==25641==  possible), you can try to increase the size of the
==25641==  main thread stack using the --main-stacksize= flag.
==25641==  The main thread stack size used in this run was 8388608.
==25641== 
==25641== HEAP SUMMARY:
==25641==     in use at exit: 188,340 bytes in 179 blocks
==25641==   total heap usage: 26,048 allocs, 25,869 frees, 1,737,876 bytes allocated
==25641== 
==25641== LEAK SUMMARY:
==25641==    definitely lost: 0 bytes in 0 blocks
==25641==    indirectly lost: 0 bytes in 0 blocks
==25641==      possibly lost: 2,880 bytes in 64 blocks
==25641==    still reachable: 185,460 bytes in 115 blocks
==25641==         suppressed: 0 bytes in 0 blocks
==25641== Rerun with --leak-check=full to see details of leaked memory
==25641== 
==25641== For counts of detected and suppressed errors, rerun with: -v
==25641== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Segmentation fault (コアダンプ)
